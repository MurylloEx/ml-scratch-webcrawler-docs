@startuml "Sequence Diagram"

title "Diagrama de Sequência - Obter Eventos do Campus"

actor "Usuário"                   as USER
control "CampusController"        as CAMPUS_CONTROLLER
participant "CourseService"       as COURSE_SERVICE
entity "Repository<CampusModel>"  as CAMPUS_REPOSITORY
entity "Repository<EventModel>"   as EVENT_REPOSITORY

USER -> CAMPUS_CONTROLLER : 1. Solicita os eventos de um Campus : onCampusEventsRequested
CAMPUS_CONTROLLER -> COURSE_SERVICE : 1.1. Consulta os eventos de um Campus : fetchCampusEvents
COURSE_SERVICE -> CAMPUS_REPOSITORY : 1.1.1. Consulta o Campus pelo identificador especificado : findOne
CAMPUS_REPOSITORY -->> COURSE_SERVICE : Retorna o Campus desejado : Promise<CampusModel | null>
alt "findOne() === null" : "Caso o Campus especificado pelo identificador não exista"
  COURSE_SERVICE -> COURSE_SERVICE : 1.1.2. throw new CampusNotFoundException
end
COURSE_SERVICE -> EVENT_REPOSITORY : 1.1.3. Consulta os eventos do Campus especificado : find
EVENT_REPOSITORY -->> COURSE_SERVICE : Retorna uma lista de eventos referentes ao Campus : Promise<EventModel[]>
COURSE_SERVICE -->> CAMPUS_CONTROLLER : Retorna uma lista de eventos referentes ao Campus : Promise<EventModel[]>
CAMPUS_CONTROLLER -->> USER : Retorna uma lista de eventos referentes ao Campus : EventModel[]
note left
  O Framework NestJS abstrai as promises 
  e transforma a resposta em um objeto 
  JSON trafegável pelo Socket. 

  Nesse caso, onCampusEventsRequested é 
  uma Action do Controller.
end note

@enduml
