@startuml "Sequence Diagram"

title "Diagrama de Sequência - Autenticação e Autorização"

actor "Usuário"                         as USER
control "AuthController"                as AUTH_CONTROLLER
participant "AuthService"               as AUTH_SERVICE
participant "OAuth2Service"             as OAUTH2_SERVICE
entity "Repository<AuthorizationModel>" as AUTHORIZATION_REPOSITORY
participant "OAuth2Client"              as OAUTH2_CLIENT
participant "MailerService"             as MAILER_SERVICE
participant "JwtService"                as JWT_SERVICE

USER -> AUTH_CONTROLLER : 1. Solicita Token de Autorização a partir do ID Token
AUTH_CONTROLLER -> AUTH_SERVICE : 1.1. Encapsula e autoriza o ID Token em um Bearer Token : authorizeGoogleToken()
AUTH_SERVICE -> OAUTH2_SERVICE : 1.1.1. Verifica se o ID Token é válido e obtém a carga útil do usuário Google : verifyIdToken()
OAUTH2_SERVICE -> OAUTH2_CLIENT : 1.1.1.1. Verifica e consulta o ID Token nos servidores Google : verifyIdToken()
OAUTH2_CLIENT -->> OAUTH2_SERVICE : Retorna um Ticket de autorização contendo dados do usuário : Promise<LoginTicket>
OAUTH2_SERVICE -->> AUTH_SERVICE : Retorna os dados do usuário Google ou falso em caso de erro : Promise<false | TokenPayload>
AUTH_SERVICE -> AUTH_SERVICE : 1.1.2. Verifica se já houve uma autorização anterior : getPreviousAuthorization()
AUTH_SERVICE -> AUTHORIZATION_REPOSITORY : 1.1.2.1. Contabiliza quantas autorizações de token já foram realizadas para um certo e-mail : count()
AUTHORIZATION_REPOSITORY -->> AUTH_SERVICE : Retorna o número de autorizações já realizadas para um certo e-mail : number
AUTH_SERVICE -> AUTHORIZATION_REPOSITORY : 1.1.2.2. Cria uma nova instância de autorização de acesso para um determinado e-mail : create()
AUTHORIZATION_REPOSITORY -->> AUTH_SERVICE : Retorna uma referência para um objeto de autorização de acesso semipreenchida : Partial<AuthorizationModel>
AUTH_SERVICE -> AUTHORIZATION_REPOSITORY : 1.1.2.3. Salva a instância de autorização de acesso para um determinado e-mail : save()
AUTHORIZATION_REPOSITORY -->> AUTH_SERVICE : Retorna uma referência do objeto salvo na base de dados : AuthorizationModel
AUTH_SERVICE -->> AUTH_SERVICE : Retorna um booleano indicando se houve ou não um acesso anterior : boolean
alt "getPreviousAuthorization() < 0" : "Verifica se o usuário já realizou algum acesso anterior, caso não tenha realizado, um e-mail é enviado com as boas vindas"
  AUTH_SERVICE -> MAILER_SERVICE : 1.1.3. Envia um e-mail de boas-vindas para o usuário recém chegado ao aplicativo : sendWelcomeMail()
  MAILER_SERVICE -->> AUTH_SERVICE : Retorna um booleano indicando se o e-mail foi enviado ou se houve um erro ao enviar o e-mail : Promise<boolean>
end
AUTH_SERVICE -> AUTH_SERVICE : 1.1.4. Constrói o Bearer Token utilizando o JWT Service : buildToken()
AUTH_SERVICE -> JWT_SERVICE : 1.1.4.1. Cria e assina o Bearer Token utilizando a chave simétrica do XXXXX : signAsync()
JWT_SERVICE -->> AUTH_SERVICE : Retorna o Bearer Token assinado com uma chave simétrica : Promise<string>
AUTH_SERVICE -->> AUTH_SERVICE : Retorna o Bearer Token assinado : Promise<string>
AUTH_SERVICE -->> AUTH_CONTROLLER : Retorna o Bearer Token assinado com uma chave simétrica : Promise<string>
AUTH_CONTROLLER -->> USER : Retorna o Bearer Token encapsulado em um objeto contendo os dados do usuário : any

@enduml
